from Demos.SystemParametersInfo import new_h
from langchain_core.tools import tool
from pydantic import BaseModel, Field
import os
import importlib.util
import sys
import re
import ast
import subprocess

def extract_function_name(tool_code: str) -> str:
    # A simple regex to extract the function name
    match = re.search(r'def (\w+)\s*\(', tool_code)
    if match:
        return match.group(1)
    else:
        raise ValueError("No function definition found in the tool code")


def install_dependencies_from_file(filepath):

    if not os.path.exists(filepath):
        print(f"File {filepath} not found.")
        return

    with open(filepath, 'r') as file:
        tree = ast.parse(file.read())

    # Extract all import statements
    imports = [node for node in ast.walk(tree) if isinstance(node, (ast.Import, ast.ImportFrom))]

    # List to store all module names
    module_names = []

    # Handle normal 'import module' and 'from module import ...'
    for node in imports:
        if isinstance(node, ast.Import):
            for alias in node.names:
                module_names.append(alias.name.split('.')[0])  # We only need the base module name
        elif isinstance(node, ast.ImportFrom):
            module_names.append(node.module.split('.')[0])  # Handle 'from module import ...'

    # Try to import each module and install if it's missing
    for module in set(module_names):  # Use 'set' to avoid duplicates
        try:
            __import__(module)
            print(f"'{module}' is already installed.")
        except ImportError:
            print(f"'{module}' is missing. Installing...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", module])




class tool_create(BaseModel):
    tool_code: str = Field(
        description="Pass a string that is the code of the tool you are supposed to design. ONLY define the tool, do not create a main to run it. All tools should return the response in the form of a string back to the calling function"
    )

    filename: str = Field(
        description="Pass an appropriate file name for the tool that the user wants to create. It should be in the format xxxx.py"
    )


    arguments: list = Field(
        description="""
        If the user provides the arguments already, then pass these.
        If the user does not provide the arguments, then generate arguments that can be passed to the tool_code.

        For example, if I ask you to generate a tool that takes in (int, int, string), then pass two numbers, and then some text that would fit the context of the tool.
        """
    )


def insert_code_in_file(file_path, marker, code_to_insert):
    # Read the existing content from the file
    with open(file_path, 'r') as file:
        lines = file.readlines()

    # Open the file in write mode to overwrite the content with the added code
    with open(file_path, 'w') as file:
        for line in lines:
            # Write the original line to the file
            file.write(line)

            # Check if the line contains the marker where the code should be inserted
            if marker in line:
                # Insert the new code block after the marker
                file.write(code_to_insert + '\n')

class append_tool(BaseModel):

    classMaker:str = Field(
        '''Consider the tool that you generated in the previous code.

        Consider the inputs for this code, and generate proper descriptions for each of the input arguments.

        From here, generate a "class" as follows:

        class(name_of_class)(BaseModel):

            (Some argument n):(type of argument) = Field("Describe the argument");

        @tool("name of arg", args_schema = (name_of_class))

        '''
    )
    file_path: str = Field(
        "Pass the filename of the tool"
    )

@tool("append_to_tool", args_schema=append_tool)
def add_to_tool(file_path, classMaker):
    marker = '#MARKER'
    insert_code_in_file(file_path,marker, classMaker.classMaker)

    new_tool_name = file_path[-3]
    new_tool_function =extract_function_name(file_path)
    new_tool = f'tools.{new_tool_name}:{new_tool_function}'

    with open(file_path, 'a') as file:
        file.write(f'\n{new_tool}')

    return "Success [eoisjfoidsj] (print this)"




@tool("create_tool", args_schema=tool_create)
def create_tool(tool_code: str, filename: str, arguments: list) -> str:
    """
    The following create_tool takes in 3 arguments, which are defined in the class tool_create.

    1) The first task is to recognize the user query and determine how to create the tool.
    2) Generate the code for the tool, as well as the arguments that will need to be passed to the tool_code in order to test it. When doing this, add a marker #MARKER after any import statements and before the function.
    2.5) If the arguments are passed by the user, then use those. If not, then try to create arguments that match to the best of your ability.
    3) Generate a filename, and then pass the 3 inputs, tool_code, filename, and arguments to this function.
    4) If the tool is successful, use the (add_to_tool) function to create the tool for yourself.
    ------------
    add_to_tool function

    """

    tools_folder = os.path.join(os.getcwd(), 'tools')

    filesrc = os.path.join(tools_folder, filename)
    toolname = extract_function_name(tool_code)



    print(filename + " " + toolname)
    print(arguments)

    with open(filesrc, 'w') as file:
        file.write(tool_code)

    try:
        install_dependencies_from_file(filesrc)
        # Get the function name (same as filename without '.py')

        # Dynamic module import
        spec = importlib.util.spec_from_file_location(toolname, filesrc)
        tool_module = importlib.util.module_from_spec(spec)
        sys.modules[toolname] = tool_module
        spec.loader.exec_module(tool_module)

        # Get the function from the module (same name as the file)
        func = getattr(tool_module, toolname)

        # Call the function with the provided arguments
        result = func(*arguments)




        return f"Tool was successfully created and executed. Output:\n{result}. Print this output to the user!"

    except Exception as e:
        return f"Tool creation succeeded, but an error occurred during execution: {e}."



